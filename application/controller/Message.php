<?php


namespace app\controller;
use app\model\Buddy;
use app\model\Message as Msg;
use app\model\Userinfo;
use think\Controller;
use think\Cookie;
use think\Db;
use think\exception\HttpResponseException;
use think\Response;

set_time_limit(0);
class Message extends Controller
{
    //当前用户身份
    private $user = "bili_007";
    private $buddy;//用户具体查看一位小伙伴给他的留言
    private $avatar;
    private $buddyList = array();
    private $buddyFlag = array();
    private $buddyL_F = array();//收录小伙伴与关系标值的二维数组
    private $buddyL_Face = array();
    private $buddyInfo = array();//显示小伙伴的头像和发言记录和通讯流向
    private $selfFace;
    private $bdyFace;
    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated
        if (dump(\cookie('?loginValid'))){
            if (dump(\cookie('loginValid'))) {
                //如果检测到cookie中的有效登录标识并且值为1的话
                $this->user = dump(\cookie('user'));
            }
        }
    }
    public function index(/*$A2avatar*/)
    {
        if (empty($this->user)){
            //return 重定向到登录页面
        }
        $this->getBuddy();
        $this->getBdyL_face();
        $this->getBuddyInfo();
        return $this->whisper(); //最终的注入操作完成控制器的单次控制
    }
    public function getBuddy()
    {
        //所查表为用户伙伴表
        $buddy = new Buddy();
        $where = function ($query) {
            $query -> field(['buddyobject','buddyflag']) -> where('buddyself','=',$this->user) -> limit(3)
                -> order('id', 'desc');
        };
        $data = $buddy->all($where);
        $listValue = array();
        $flagValue = array();
        foreach ($data as $key => $value){
            $tempValue = $value -> getData();
            $object = $tempValue['buddyobject'];
            $flag = $tempValue['buddyflag'];
            array_push($listValue, $object);
            array_push($flagValue, $flag);
        }

        $buddyList = $listValue;
        $this->buddyList = $buddyList;
        $buddyFlag = $flagValue;

        $buddyTemp = array();
        for ($i=0; $i < count($buddyList); $i++){
            $buddyTemp['object'] = $buddyList[$i];
            $buddyTemp['flag'] = $buddyFlag[$i];
            array_push($this->buddyL_F, $buddyTemp);
            array_splice($buddyTemp, 0, count($buddyTemp));
        }
    }
    public function getBdyL_face()
    {
        $user = new Userinfo();
        $l_faceTemp = array();
        //查对应小伙伴的头像与其昵称一并合并到一个关联数组当中
        foreach ($this->buddyList as $bdy){
            $where = function ($query) use ($bdy) {
                $query -> field(['ufacePath']) -> where([
                    'username' => $bdy,
                ]);
            };
            $l_faceTemp['buddy'] = $bdy;
            $l_faceTemp['face'] = implode('', $user -> find($where) -> getData());
            array_push($this->buddyL_Face, $l_faceTemp);
            array_splice($l_faceTemp,0,count($l_faceTemp));
        }
    }
    public function getBuddyInfo()
    {
        $buddy = $this->buddyList;
        //所查表为伙伴发言表message
        if (empty($this->buddy))
            $this->buddy = $buddy[0];
        foreach ($this->buddyL_F as $item){
            if ($item['object'] === $this->buddy){
                foreach ($item as $object => $flag){
                    $this->buddyFlag = $flag;
                }
            }
        }
        //找到缔结标值后,查询不超过三条关联讯息,注意怎么关联到一起有组织的记录下来
        $msg = new Msg();
        $user = new Userinfo();
        $infoTemp = array();
        $msgWhere = function ($query){
            $query -> field(['from','message']) -> where([
                'buddyflag' => $this->buddyFlag,
                'senderRead' => 1,
                'recverRead' => 1
            ]) -> limit(3) ;//-> order('id', 'desc');
        };
        $message = $msg -> all($msgWhere);
        foreach ($message as $key => $value){
            $from = $value -> getData()['from'];
            $msgData = $value -> getData()['message'];
            if ($from === 0){
                $infoTemp['avatar'] = $this->user;
                $infoTemp['from'] = 0;
            }
            else{
                $infoTemp['avatar'] = $this->buddy;
                $infoTemp['from'] = 1;
            }
            $this->avatar = $infoTemp['avatar'];
            $infoTemp['message'] = $msgData;
            //查询伙伴的头像
            $faceWhere = function ($query){
                $query -> field('ufacePath') -> where('username','=', $this->avatar);
            };
            $face = implode('', $user->find($faceWhere)->getData());
            $infoTemp['face'] = $face;
            array_push($this->buddyInfo,$infoTemp);
            array_splice($infoTemp, 0, count($infoTemp));
            if (empty($this->selfFace) && $from == 0){
                $this->selfFace = $face;
            } elseif (empty($this->bdyFace) && $from == 1){
                $this->bdyFace = $face;
            }
        }
        $this->assign("faceData", [
                "isMe" => $this->selfFace,
                "notMe" => $this->bdyFace
            ]);
        $this->assign("buddyName", $this->buddy);

    }
    public function saveMsg()
    {
        $msg = new Msg();
        $data = $this->getJnPostMsg();
        $buddyFlag = $this->getBuddyFlag($data["to"]);
        //先用max方法获取当前最大的id然后加1
        $max_id = DB::name('message') ->max('id');

        //DB::execute("alter table message auto_increment=".$max_id);
        $where = [
            'message' => $data['myMsg'],
            'from' => 0,//0代表自己的发言
            'buddyflag' => $buddyFlag,
            'id' => ++$max_id,
            'senderRead' => 1
        ];

        $msg -> save($where);
        $header['Access-Control-Allow-Origin']  = '*';
        $header['Access-Control-Allow-Headers'] = 'X-Requested-With,Content-Type';
        $header['Access-Control-Allow-Methods'] = 'GET,POST';
        $header['Content-Type'] = 'text/html';
        $response = Response::create()->header($header);
        throw  new HttpResponseException($response);
    }
    public function ajaxRqtHandle($avatar)
    {
        set_time_limit(0);//设置脚本超时时间为无限，不然在过了超时时间后脚本会自动关闭，轮询失败
        $msg = new Msg();
        $bdyFlag = $this->getBuddyFlag($avatar);
        $msgWhere = function ($query) use($bdyFlag){
            $query -> field(['message','id']) -> where([
                'from' => 1,
                'recverRead' => 0,
                'buddyflag' => $bdyFlag
            ]);
        };//限制每次读出一条数据，便于修改其已读flag
        while (true) {    //进入无限循环
            $msgData = $msg -> find($msgWhere) ->getData();  //查询结果
            $msgID = $msgData["id"];
            $changeWhere = ["id" => $msgID];
            $changeData = ["recverRead" => 1];
            if (count($msgData) > 0){  //当有未读信息时读取信息
                $msg -> save($changeData, $changeWhere);//将信息的已读flag设为1
                $jsonMsg = json_encode($msgData['message'],JSON_UNESCAPED_UNICODE);//取到信息，将信息用转码为json格式，返回给JS
                echo $jsonMsg;
                break;//输出信息后退出while循环，结束当前脚本
            }
            usleep(2000);//如果没有信息不会进入if块，但会执行一下等待2秒，防止PHP因循环假死
        }
    }
    public function avatarControl($A2avatar)
    {
        if (!empty($A2avatar)){
            $this->buddy = $A2avatar;
        }
        $this->getBuddyInfo();
        return json($this->buddyInfo);
        /*foreach ($this->buddyInfo as $key => $bdy){
            echo json($bdy);
        }*/
    }
    //--------------------------------------------  //|
    public function getBuddyFlag($buddy)            //|
    {                                               //|
        $bdy = new Buddy();                         //|
        $where = function ($jquery) use ($buddy){   //|
            $jquery -> field('buddyflag') -> where([//|
                'buddyself' => $this->user,         //|
                'buddyobject' => $buddy             //|
            ]);                                     //|
        };                                          //|
        return $bdy -> find($where) -> getData()["buddyflag"];   //|
    }                                               //|
    public function getJnPostMsg()                  //|
    {                                               //|
        $_post = $this->request->post();            //|
        if (!empty($_post)){
            return $_post;                          //|
        }                                           //|
    }                                               //|
    //--------------------------------------------  //|
    public function whisper()
    {
        $this->assign('buddyList', $this->buddyL_Face);
        $this->assign('buddyInfo', $this->buddyInfo);
        try {
            return $this->view->fetch('message/whisper');
        } catch (\Exception $e) {
        }
    }
}