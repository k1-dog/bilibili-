<?php
namespace app\controller;
use app\model\User;
use app\model\Userinfo;
use think\Controller;
use think\facade\Cookie;

//use think\Db;

class Login extends Controller
{
    //----------用户参数配置列表;
    private $userLoginInfo = [
        'name' => '',
        'pwd'  => '',
        'valid' => 0 //登录状态默认为假
    ] ;//用户登录参数信息
    private $userLevelInfo = 'user is not examed~!';//用户基础参数信息
    private $updateInfo;//用户等级修改参数信息
    private $loginFlag = false;//登录就绪检测请求标志

    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        if(!empty(Cookie::get('userData')['user'])){
            $this->userLoginInfo['name'] = Cookie::get('userData')['user'];
            $this->userLoginInfo['pwd'] = Cookie::get('userData')['pwd'];
            $this->loginFlag = true;//处于登录检测状态,请求检测正误;
        }/*else{
            $this->userParaGet(); //receive userData from GetType
        }*/
    }

    public function index()
    {
        $this->loginCheck();
        if ($this->userLoginInfo['valid'])//examine is OK!
        {
            $this->preHandLevel();//用户经验等级预处理
            $this->autoLoadUser();//自获取用户基础信息
            return $this->login();//上述操作均成功后注入所需的参数到首页模板
        }
        else{
            echo $this->view->fetch('login/authLogin');
        }
        //return '<style type="text/css">*{ padding: 0; margin: 0; } div{ padding: 4px 48px;} a{color:#2E5CD5;cursor: pointer;text-decoration: none} a:hover{text-decoration:underline; } body{ background: #fff; font-family: "Century Gothic","Microsoft yahei"; color: #333;font-size:18px;} h1{ font-size: 100px; font-weight: normal; margin-bottom: 12px; } p{ line-height: 1.6em; font-size: 42px }</style><div style="padding: 24px 48px;"> <h1>:) </h1><p> ThinkPHP V5.1<br/><span style="font-size:30px">12载初心不改（2006-2018） - 你值得信赖的PHP框架</span></p></div><script type="text/javascript" src="https://tajs.qq.com/stats?sId=64890268" charset="UTF-8"></script><script type="text/javascript" src="https://e.topthink.com/Public/static/client.js"></script><think id="eab4b9f840753f8e7"></think>';
    }

    //用户登录参数获取赋值
    public function userParaGet()
    {
        $method = $this->request->method();//获取请求方式
        //echo $method.'</br>';
        $param = $this->request->param();//获取所有参数，最全
        $get =  $this->request->get();//获取get上传的内容
        //$get = implode(" ",$get);
        $post =  $this->request->post();//获取post上传的内容
        //$post = implode(" ",$post);
        //$this->request->file('file');//获取文件
        if(!empty($get))
        {
            if(empty($get['name']) or empty($get['pwd']))
                return ;
            $this->userLoginInfo['name'] = $get['name'];
            $this->userLoginInfo['pwd'] = $get['pwd'];
            $this->loginFlag = true;//处于登录检测状态,请求检测正误;
        }
    }

    public function loginCheck()
    {
        //$userInfo = message::select();
        if($this->loginFlag) //登录检测标志就绪时
        {
            $biliUser = new User($this->userLoginInfo['name']);
            //$result = $biliUser -> loginValid();
            $result = $biliUser -> where('username', $this->userLoginInfo['name']) ->value('password');
            if($result) //check is 1 means that user is existed
            {
                if($this->userLoginInfo['pwd'] == $result)
                    $this->userLoginInfo['valid'] = 1;
            }
        }

        $this->assign('userValid', $this->userLoginInfo['valid']);
    }

    //登录成功之后获取用户基础配置信息
    public function autoLoadUser()
    {
        $user = new Userinfo();
        //信息注入到参数中去
        $this->userLevelInfo = $user->retrieveUser($this->userLoginInfo['name']);
        //print_r($this->userLevelInfo);
    }

    //用户登陆成功之后,基础信息获取之前执行预处理
    public function preHandLevel()
    {
        if (!empty(Cookie::get('userData')['user'])) {
            return ;
        }
        //获取当前用户的经验条信息,决定用户是否升级
        $user = new Userinfo();
        $where = function ($query) {
            $query -> field(['userLevel','userExpBar']) -> where('username','=',$this->userLoginInfo['name']);
        };
        $data = $user->find($where)->getData();
        $expTopLimit = $data['userLevel'] * 100; //经验条升级满槽上限阈值
        $expCur = $data['userExpBar'] + 10; //用户登录成功,当前经验自加10
        $where = ['username' => $this->userLoginInfo['name']];
        if ($expCur >= $expTopLimit)
        {
            //当前经验超过阈值即更新用户等级 + 1
            //update user's Level
            $this->updateInfo = [
                'userLevel' => $data['userLevel'] + 1,
                'userExpBar' => 0
            ];
        }
        else{$this->updateInfo = ['userExpBar' => $expCur];}
        $user->save($this->updateInfo,$where);
    }

    //登录\预处理\基础信息均成功后执行全部的登录参数模板注入结束登录控制器的操作
    public function login()
    {
        $this->assign('userLevel', $this->userLevelInfo);
        try {
            return $this->view->fetch('login/login');
        } catch (\Exception $e) {
        }
    }
}
